Requirements
------------

- MinGW
  http://mingw-w64.sourceforge.net/
  (Actually I used tdm64-gcc-4.9.2-3 but this should make no difference. http://tdm-gcc.tdragon.net/download)
  See README.win32 for instructions on how to get MinGW-w64, be sure to get the 64-bit Windows archive.

- CMake
  http://www.cmake.org/cmake/resources/software.html
- OpenCV
  http://sourceforge.net/projects/opencvlibrary/files/opencv-win/
- Git
  http://code.google.com/p/msysgit/

1. Clone the PS Move API repository

	git clone --recursive https://github.com/cboulay/psmoveapi.git
	cd psmoveapi

2. Get libusb-1.0 built binaries (Needed for PS3EYEDriver use in tracker)
	http://libusb.info/
	Downloads -> latest windows binaries
	Unpack into psmoveapi\external\libusb-1.0

3. Build OpenCV repository (Needed for tracker)
    Download opencv-2.4.11.zip from http://sourceforge.net/projects/opencvlibrary/files/opencv-unix/
    (Yes, I know it says unix, but all we need are the sources.)
    Unpack it into psmoveapi\ and trim the version off the directory name (i.e. psmoveapi\opencv)
    Open a MinGW command prompt to the psmoveapi\opencv directory.
	mkdir build
	cd build
	cmake .. -G "MinGW Makefiles" -DBUILD_SHARED_LIBS=0 -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DBUILD_DOCS=OFF -DBUILD_opencv_flann=OFF -DBUILD_opencv_features2d=OFF -DBUILD_opencv_objdetect=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_ts=OFF -DBUILD_opencv_ml=OFF -DBUILD_opencv_video=OFF -DBUILD_opencv_java=OFF -DWITH_OPENEXR=OFF -DWITH_FFMPEG=OFF -DWITH_JASPER=OFF -DWITH_TIFF=OFF
	mingw32-make -j4
	mingw32-make install

4. Build psmoveapi

	cd ..\..
	mkdir build
	cd build
	SET CMAKE_CXX_FLAGS=%CMAKE_CXX_FLAGS% -std=c++11
	cmake .. -G "MinGW Makefiles" -DPSMOVE_BUILD_PYTHON_BINDINGS=0 -DPSMOVE_USE_LOCAL_OPENCV=1 -DPSMOVE_USE_MADGWICK_AHRS=1 -DPSMOVE_USE_PS3EYE_DRIVER=1 -DPSMOVE_USE_LOCAL_LIBUSB=1
	mingw32-make

5. Read WINDOWS_EXTRA for windows-specific information on pairing and connecting the psmove controller and on using the PS3Eye camera.

6. Start one of the desired test applications

	If you previously chose to build the example applications (which is the
	default), you can then run

	example.exe

	for a basic example.

For questions, please read the archives of the PS Move Mailing List. If you
cannot find an answer to your question in the archives, send an e-mail:

   https://groups.google.com/forum/#!aboutgroup/psmove

7. If you intend to build the libraries with MinGW but use with MSVC, http://www.mingw.org/wiki/MSVC_and_MinGW_DLLs

Option 1 to create the DEF files is to edit CMakeLists.txt. For example,
if (MINGW)
    set_target_properties(psmoveapi_tracker PROPERTIES LINK_FLAGS "-Wl,--output-def,libpsmoveapi_tracker.def")
endif (MINGW)

Option 2 is to hand-craft them. https://wiki.videolan.org/GenerateLibFromDll
Open a MSVC command prompt to the directory where you built the libraries.
dumpbin /exports libpsmoveapi.dll > libpsmoveapi.def
dumpbin /exports libpsmoveapi_tracker.dll > libpsmoveapi_tracker.def
Now edit each def so the first line is EXPORTS and the remaining lines are the symbol names.
    
    lib /MACHINE:X64 /DEF:libpsmoveapi.def
    lib /MACHINE:X64 /DEF:libpsmoveapi_tracker.def